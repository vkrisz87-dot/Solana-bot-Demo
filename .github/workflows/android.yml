name: Android Debug APK (self-generating proje android-actions/setup-android@v3

      
        run: |
          set -e
          mkdir -p app/src/main/java/com/vbek/sst/ui/theme
          mkdir -p app/src/main/java/com/vbek/sst/data
          mkdir -p app/src/main/java/com/vbek/sst/domain
          mkdir -p app/src/main/java/com/vbek/sst/engine
          mkdir -p app/src/main/java/com/vbek/sst/strategies
          mkdir -p app/src/main/res/mipmap-anydpi-v26
          mkdir -p app/src/main/res/values
          mkdir -p .github/workflows

          cat > settings.gradle.kts <<'EOF'
          pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }
          plugins {
            id("com.android.application") version "8.5.2" apply false
            id("org.jetbrains.kotlin.android") version "1.9.24" apply false
          }
          rootProject.name = "SolanaSimTrader"
          include(":app")
          EOF

          cat > build.gradle.kts <<'EOF'
          allprojects { repositories { google(); mavenCentral() } }
          EOF

          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx1g
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF

          cat > app/build.gradle.kts <<'EOF'
          plugins { id("com.android.application"); id("org.jetbrains.kotlin.android") }
          android {
            namespace = "com.vbek.sst"
            compileSdk = 34
            defaultConfig {
              applicationId = "com.vbek.sst"
              minSdk = 26
              targetSdk = 34
              versionCode = 1
              versionName = "0.1"
              vectorDrawables { useSupportLibrary = true }
            }
            buildTypes {
              release {
                isMinifyEnabled = true
                proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
              }
              debug { isMinifyEnabled = false }
            }
            buildFeatures { compose = true; buildConfig = true }
            composeOptions { kotlinCompilerExtensionVersion = "1.5.14" }
            packaging { resources { excludes += "/META-INF/{AL2.0,LGPL2.1}" } }
          }
          dependencies {
            val composeBom = platform("androidx.compose:compose-bom:2024.06.00")
            implementation(composeBom); androidTestImplementation(composeBom)
            implementation("androidx.core:core-ktx:1.13.1")
            implementation("androidx.activity:activity-compose:1.9.0")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.2")
            implementation("androidx.compose.ui:ui")
            implementation("androidx.compose.ui:ui-tooling-preview")
            implementation("androidx.compose.material3:material3")
            debugImplementation("androidx.compose.ui:ui-tooling")
            implementation("com.squareup.retrofit2:retrofit:2.11.0")
            implementation("com.squareup.retrofit2:converter-moshi:2.11.0")
            implementation("com.squareup.okhttp3:okhttp:4.12.0")
            implementation("com.squareup.moshi:moshi-kotlin:1.15.1")
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1")
          }
          EOF

          cat > app/proguard-rules.pro <<'EOF'
          -keep class com.vbek.sst.** { *; }
          -dontwarn okhttp3.**
          -dontwarn okio.**
          EOF

          cat > app/src/main/AndroidManifest.xml <<'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
            <uses-permission android:name="android.permission.INTERNET"/>
            <application
              android:name=".App"
              android:allowBackup="true"
              android:icon="@mipmap/ic_launcher"
              android:label="SolanaSimTrader"
              android:roundIcon="@mipmap/ic_launcher_round"
              android:supportsRtl="true"
              android:theme="@style/Theme.Material3.DayNight.NoActionBar">
              <activity android:name=".MainActivity" android:exported="true">
                <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                  <category android:name="android.intent.category.LAUNCHER" />
                </intent-filter>
              </activity>
            </application>
          </manifest>
          EOF

          cat > app/src/main/java/com/vbek/sst/App.kt <<'EOF'
          package com.vbek.sst
          import android.app.Application
          class App : Application()
          EOF

          cat > app/src/main/java/com/vbek/sst/MainActivity.kt <<'EOF'
          package com.vbek.sst
          import android.os.Bundle
          import androidx.activity.ComponentActivity
          import androidx.activity.compose.setContent
          import androidx.activity.viewModels
          import androidx.compose.foundation.layout.*
          import androidx.compose.foundation.lazy.LazyColumn
          import androidx.compose.foundation.lazy.items
          import androidx.compose.material3.*
          import androidx.compose.runtime.*
          import androidx.compose.ui.Alignment
          import androidx.compose.ui.Modifier
          import androidx.compose.ui.text.font.FontWeight
          import androidx.compose.ui.unit.dp
          import com.vbek.sst.ui.BotViewModel
          import com.vbek.sst.ui.BotUiState
          import com.vbek.sst.ui.theme.AppTheme
          class MainActivity : ComponentActivity() {
            private val vm: BotViewModel by viewModels()
            override fun onCreate(savedInstanceState: Bundle?) {
              super.onCreate(savedInstanceState)
              setContent {
                AppTheme {
                  Surface(modifier = Modifier.fillMaxSize()) {
                    val state by vm.state.collectAsState()
                    BotScreen(state, vm::start, vm::stop, vm::clear)
                  }
                }
              }
            }
          }
          @Composable
          fun BotScreen(state: BotUiState, onStart: () -> Unit, onStop: () -> Unit, onClear: () -> Unit) {
            Column(Modifier.fillMaxSize().padding(16.dp)) {
              Text("SolanaSimTrader – Demo", style = MaterialTheme.typography.titleLarge, fontWeight = FontWeight.Bold)
              Spacer(Modifier.height(12.dp))
              Row(verticalAlignment = Alignment.CenterVertically) {
                Button(onClick = onStart, enabled = !state.running) { Text("Start") }
                Spacer(Modifier.width(8.dp))
                Button(onClick = onStop, enabled = state.running) { Text("Stop") }
                Spacer(Modifier.width(8.dp))
                OutlinedButton(onClick = onClear) { Text("Clear log") }
              }
              Spacer(Modifier.height(12.dp))
              Text("Állapot: ${state.status}")
              Spacer(Modifier.height(8.dp))
              Text("Aktív stratégia: ${state.activeStrategy}")
              Spacer(Modifier.height(8.dp))
              Text("PNL (USDC): %.4f".format(state.pnlUsdc))
              Spacer(Modifier.height(8.dp))
              Text("Napi találatok: ${state.trades}")
              Spacer(Modifier.height(12.dp))
              Text("Log:")
              Spacer(Modifier.height(6.dp))
              LazyColumn(Modifier.weight(1f)) { items(state.log) { Text(it) } }
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/ui/theme/Theme.kt <<'EOF'
          package com.vbek.sst.ui.theme
          import androidx.compose.material3.MaterialTheme
          import androidx.compose.material3.lightColorScheme
          import androidx.compose.runtime.Composable
          @Composable fun AppTheme(content: @Composable () -> Unit) {
            MaterialTheme(colorScheme = lightColorScheme(), content = content)
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/data/MarketApi.kt <<'EOF'
          package com.vbek.sst.data
          import com.squareup.moshi.Json
          import com.squareup.moshi.Moshi
          import com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory
          import retrofit2.Retrofit
          import retrofit2.converter.moshi.MoshiConverterFactory
          import retrofit2.http.GET
          import retrofit2.http.Query
          interface MarketApi {
            @GET("price")
            suspend fun getPrices(@Query("ids") ids: String, @Query("vsToken") vsToken: String = "USDC"): PriceResponse
          }
          fun createMarketApi(): MarketApi {
            val moshi = Moshi.Builder().add(KotlinJsonAdapterFactory()).build()
            return Retrofit.Builder().baseUrl("https://price.jup.ag/v6/")
              .addConverterFactory(MoshiConverterFactory.create(moshi)).build()
              .create(MarketApi::class.java)
          }
          data class PriceResponse(@Json(name = "data") val data: Map<String, PriceItem>)
          data class PriceItem(@Json(name = "price") val price: Double, @Json(name = "mintSymbol") val mintSymbol: String?)
          EOF

          cat > app/src/main/java/com/vbek/sst/data/MarketRepository.kt <<'EOF'
          package com.vbek.sst.data
          import kotlinx.coroutines.Dispatchers
          import kotlinx.coroutines.withContext
          class MarketRepository(private val api: MarketApi) {
            private val watchlist = listOf("SOL","USDC","BONK","JUP","PYTH","MSOL","STSOL")
            suspend fun snapshot(): MarketSnapshot = withContext(Dispatchers.IO) {
              val resp = api.getPrices(ids = watchlist.joinToString(","))
              val map = resp.data.mapValues { it.value.price }
              MarketSnapshot(System.currentTimeMillis(), map)
            }
          }
          data class MarketSnapshot(val timeMillis: Long, val pricesUsdc: Map<String, Double>) {
            fun p(sym: String): Double = pricesUsdc[sym] ?: error("Price missing for $sym")
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/domain/Strategy.kt <<'EOF'
          package com.vbek.sst.domain
          import com.vbek.sst.data.MarketSnapshot
          interface Strategy { val name: String; fun propose(snapshot: MarketSnapshot): TradeAction? }
          data class TradeAction(val legs: List<Leg>, val expectedProfitBps: Int, val base: String = "USDC")
          data class Leg(val from: String, val to: String, val amountBase: Double)
          EOF

          cat > app/src/main/java/com/vbek/sst/engine/RegimeDetector.kt <<'EOF'
          package com.vbek.sst.engine
          import com.vbek.sst.data.MarketSnapshot
          import kotlin.math.abs
          class RegimeDetector {
            data class Regime(val trending: Boolean, val volatile: Boolean)
            private var last: MarketSnapshot? = null
            fun detect(curr: MarketSnapshot): Regime {
              val prev = last; last = curr
              if (prev == null) return Regime(false,false)
              val dSol = pct(prev.p("SOL"), curr.p("SOL"))
              val dBonk = pct(prev.p("BONK"), curr.p("BONK"))
              val vol = abs(dSol) + abs(dBonk) > 0.6
              val trend = dSol * dBonk > 0
              return Regime(trending = trend, volatile = vol)
            }
            private fun pct(a: Double, b: Double) = if (a == 0.0) 0.0 else (b-a)/a*100.0
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/engine/StrategySelector.kt <<'EOF'
          package com.vbek.sst.engine
          import com.vbek.sst.data.MarketSnapshot
          import com.vbek.sst.domain.Strategy
          class StrategySelector {
            fun pick(strategies: List<Strategy>, regime: RegimeDetector.Regime, snap: MarketSnapshot): Strategy? {
              val byName = strategies.associateBy { it.name }
              return when {
                regime.trending -> byName.values.firstOrNull { it.name.startsWith("Trend") }
                regime.volatile -> byName.values.firstOrNull { it.name.startsWith("TriangularArb") || it.name.contains("Arb") }
                else -> byName.values.firstOrNull { it.name.startsWith("MeanReversion") }
              } ?: strategies.firstOrNull()
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/engine/Engine.kt <<'EOF'
          package com.vbek.sst.engine
          import com.vbek.sst.data.MarketRepository
          import com.vbek.sst.domain.Strategy
          import com.vbek.sst.ui.BotLogger
          import kotlinx.coroutines.*
          class Engine(
            private val repo: MarketRepository,
            private val strategies: List<Strategy>,
            private val selector: StrategySelector,
            private val logger: BotLogger,
            private val onMetric: (pnlDelta: Double, active: String) -> Unit,
            private val tickMs: Long = 1500L,
          ) {
            private var job: Job? = null
            private var pnlUsdc: Double = 0.0
            fun start() {
              if (job?.isActive == true) return
              job = CoroutineScope(Dispatchers.Default).launch {
                logger.log("Engine started (demo mode, no real swaps)")
                val regimeDetector = RegimeDetector()
                while (isActive) {
                  try {
                    val snap = repo.snapshot()
                    val regime = regimeDetector.detect(snap)
                    val active = selector.pick(strategies, regime, snap)
                    val action = active?.propose(snap)
                    if (action != null && action.expectedProfitBps >= 20) {
                      val delta = 100.0 * action.expectedProfitBps / 10_000.0
                      pnlUsdc += delta
                      logger.log("${'$'}{active.name} executed (sim): +${'$'}{"%.4f".format(delta)} USDC [${'$'}{action.expectedProfitBps} bps]")
                      onMetric(delta, active.name)
                    } else {
                      logger.log("No-op: no profitable action")
                      onMetric(0.0, active?.name ?: "none")
                    }
                  } catch (t: Throwable) {
                    logger.log("Error tick: ${'$'}{t.message}")
                  }
                  delay(tickMs)
                }
              }
            }
            fun stop() { job?.cancel(); logger.log("Engine stopped") }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/strategies/TriangularArbStrategy.kt <<'EOF'
          package com.vbek.sst.strategies
          import com.vbek.sst.data.MarketSnapshot
          import com.vbek.sst.domain.Leg
          import com.vbek.sst.domain.Strategy
          import com.vbek.sst.domain.TradeAction
          class TriangularArbStrategy : Strategy {
            override val name = "TriangularArb(USDC/SOL/BONK)"
            override fun propose(snapshot: MarketSnapshot): TradeAction? {
              val usdc = 100.0
              val sol = usdc / snapshot.p("SOL")
              val bonk = sol * (snapshot.p("SOL") / snapshot.p("BONK"))
              val usdcBack = bonk * snapshot.p("BONK")
              val net = (usdcBack - usdc) - usdc * 0.0004
              val bps = ((net / usdc) * 10_000).toInt()
              return if (bps > 20)
                TradeAction(listOf(Leg("USDC","SOL", usdc), Leg("SOL","BONK", usdc), Leg("BONK","USDC", usdc)), bps, "USDC")
              else null
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/strategies/MsolSolArbStrategy.kt <<'EOF'
          package com.vbek.sst.strategies
          import com.vbek.sst.data.MarketSnapshot
          import com.vbek.sst.domain.Leg
          import com.vbek.sst.domain.Strategy
          import com.vbek.sst.domain.TradeAction
          import kotlin.math.abs
          class MsolSolArbStrategy : Strategy {
            override val name = "mSOL↔SOL Arb"
            override fun propose(snapshot: MarketSnapshot): TradeAction? {
              val sol = snapshot.p("SOL")
              val msol = snapshot.p("MSOL")
              val diffBps = ((msol/sol - 1.0) * 10_000).toInt()
              val absBps = abs(diffBps)
              if (absBps < 30) return null
              val usdc = 100.0
              val legs = if (diffBps > 0) listOf(Leg("SOL","MSOL", usdc), Leg("MSOL","USDC", usdc))
                         else listOf(Leg("MSOL","SOL", usdc), Leg("SOL","USDC", usdc))
              val exp = absBps - 3
              return if (exp > 20) TradeAction(legs, exp, "USDC") else null
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/strategies/TrendStrategy.kt <<'EOF'
          package com.vbek.sst.strategies
          import com.vbek.sst.data.MarketSnapshot
          import com.vbek.sst.domain.Leg
          import com.vbek.sst.domain.Strategy
          import com.vbek.sst.domain.TradeAction
          class TrendStrategy : Strategy {
            override val name = "Trend(SOL/USDC)"
            private var lastPrice: Double? = null
            override fun propose(snapshot: MarketSnapshot): TradeAction? {
              val p = snapshot.p("SOL")
              val lp = lastPrice; lastPrice = p
              if (lp == null) return null
              val chg = (p - lp) / lp
              val usdc = 100.0
              return when {
                chg > 0.003 -> TradeAction(listOf(Leg("USDC","SOL", usdc), Leg("SOL","USDC", usdc)), 25)
                chg < -0.003 -> TradeAction(listOf(Leg("USDC","SOL", usdc), Leg("SOL","USDC", usdc)), 25)
                else -> null
              }
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/strategies/MeanReversionStrategy.kt <<'EOF'
          package com.vbek.sst.strategies
          import com.vbek.sst.data.MarketSnapshot
          import com.vbek.sst.domain.Leg
          import com.vbek.sst.domain.Strategy
          import com.vbek.sst.domain.TradeAction
          import kotlin.math.abs
          class MeanReversionStrategy : Strategy {
            override val name = "MeanReversion(BONK)"
            private var ema: Double? = null
            private val alpha = 0.3
            override fun propose(snapshot: MarketSnapshot): TradeAction? {
              val p = snapshot.p("BONK")
              ema = when (val e = ema) { null -> p; else -> e + alpha * (p - e) }
              val baseline = ema ?: p
              val dev = (p - baseline) / p
              val usdc = 100.0
              return if (abs(dev) > 0.01) TradeAction(listOf(Leg("USDC","BONK", usdc), Leg("BONK","USDC", usdc)), 20) else null
            }
          }
          EOF

          cat > app/src/main/java/com/vbek/sst/ui/BotUiState.kt <<'EOF'
          package com.vbek.sst.ui
          data class BotUiState(
            val running: Boolean = false,
            val status: String = "Idle",
            val activeStrategy: String = "-",
            val pnlUsdc: Double = 0.0,
            val trades: Int = 0,
            va